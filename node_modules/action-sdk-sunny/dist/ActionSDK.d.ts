declare module 'action-sdk-sunny' {
  export = actionSDK;
}
declare namespace actionSDK {
  
  /**   * Constant denoting maximum number of requests in a batch.   * @category API   */  export const maxBatchApisCount = 10;  /**   * Function to execute an API.   *   * Usage:   * ```typescript   * let action: actionSDK.Action;   * let request = new actionSDK.CreateAction.Request(action);   * let response = await actionSDK.executeApi(request) as actionSDK.CreateAction.Response;   * let actionId = response.actionId;   * ```   * @param request API request object   * @returns Promise containing the API response object   * @category API   */  export function executeApi(request: BaseApi.Request): Promise<BaseApi.Response>;  /**   * Function to execute a list of APIs in batch.   * There shouldn't be more than 10 APIs in a batch!   *   * Usage:   * ```typescript   * let action: actionSDK.Action;   * let createActionRequest = new actionSDK.CreateAction.Request(action);   * let dataRow: actionSDK.ActionDataRow;   * let addDataRowRequest = new actionSDK.ActionDataRow.Request(dataRow);   * addDataRowRequest.setDependentOn([createActionRequest]);   * let batchRequest = new actionSDK.BaseApi.BatchRequest([createActionRequest, addDataRowRequest]);   * let batchResponse = await actionSDK.executeBatchApi(batchRequest);   * let actionId = batchResponse.responses[0].actionId;   * let dataRowId = batchResponse.responses[1].dataRowId;   * ```   * @param batchRequest Batch request object containing the list of individual API request objects   * @returns Promise containing the batch response   * @category API   */  export function executeBatchApi(batchRequest: BaseApi.BatchRequest): Promise<BaseApi.BatchResponse>;  
  /**   * This class contains the utility APIs.   * @internal   */  export class Utils {      static generateGUID(): string;      static isEmptyString(str: string): boolean;      static isEmptyObject(obj: any): boolean;      static isValidJson(json: any): boolean;  }  
  /**   * This interface represents the error object returned when any API fails.   */  export interface ApiError {      /**       * Error category.       */      category: ApiErrorCategory;      /**       * Error code.       */      code: string;      /**       * Error message.       */      message: string;  }  /**   * This enum represents the different categories of API errors.   */  export enum ApiErrorCategory {      /**       * Any unknown error.       */      Unknown = "Unknown",      /**       * Error when more than allowed APIs are executed in batch.       */      BatchApiCountLimitExceeded = "BatchApiCountLimitExceeded",      /**       * Error when API type is not supported.       */      UnsupportedApi = "UnsupportedApi",      /**       * Error when API request contains invalid data.       */      InvalidRequest = "InvalidRequest",      /**       * Error when API execution fails due to a server error.       * ErrorCode is useful for finer error types.       */      ServerError = "ServerError"  }  /**   * Function to generate ApiError object.   *   * @param category Error category   * @param code Error code   * @param message Error message   * @internal   */  export function getApiError(category: ApiErrorCategory, code: string, message: string): ApiError;  
  /**   * This enum represents the diffetent types of APIs.   * @ignore   */  export enum ApiType {      CreateAction = "CreateAction",      UpdateAction = "UpdateAction",      DeleteAction = "DeleteAction",      GetAction = "GetAction",      AddActionDataRow = "AddActionDataRow",      UpdateActionDataRow = "UpdateActionDataRow",      DeleteActionDataRow = "DeleteActionDataRow",      GetActionDataRow = "GetActionDataRow",      GetActionDataRows = "GetActionDataRows",      GetActionDataRowsSummary = "GetActionDataRowsSummary",      DownloadActionDataRowsResult = "DownloadActionDataRowsResult",      GetLocalizedStrings = "GetLocalizedStrings",      GetSubscriptionMembers = "GetSubscriptionMembers",      GetSubscriptionMemberCount = "GetSubscriptionMemberCount",      GetActionSubscriptionNonParticipants = "GetActionSubscriptionNonParticipants",      GetContext = "GetContext",      CloseView = "CloseView"  }  /**   * Base API namespace.   * @internal   */  export namespace BaseApi {      /**       * Base class for all kinds of API request body.       */      class Request {          /**           * Unique identifier for the request.           * This is useful for setting dependencies among requests in a batch.           * @internal           */          id: string;          /**           * IDs of the requests on which the current request depends on.           * @internal           */          dependsOn: string[];          /**           * API type.           * @internal           */          apiType: ApiType;          /**           * Constructor to create a request object.           * @internal           */          constructor(apiType: ApiType);          /**           * Validation.           * @internal           */          validate(): void;          /**           * Utility to make current request dependent on other requests.           * This is useful to set an order for execution of requests in a batch.           * @param requests The request objects on which the current one depends           */          setDependentOn(requests: Request[]): void;      }      /**       * Base class for all kinds of API response body.       */      class Response {          /**           * The ID of the corresponding request.           * @internal           */          id: string;          /**           * API error, if any.           */          error: ApiError;          /**           * Flag denoting if API was successful or not.           */          get success(): boolean;          /**           * Constructor to create a response object.           * @internal           */          constructor(id: string, error?: ApiError);      }      /**       * Container for multiple API requests.       */      class BatchRequest {          /**           * Batch API request ID.           * @internal           */          id: string;          /**           * List of API requests in the batch.           */          requests: Request[];          /**           * Constructor to create a batch request object.           */          constructor(requests: Request[]);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Container for multiple API responses.       */      class BatchResponse {          /**           * Batch API request ID.           * @internal           */          id: string;          /**           * List of API responses for the batch.           */          responses: Response[];          /**           * Constructor to create a batch response object.           * @internal           */          constructor(requestId: string, responses: Response[]);      }  }  /**   * API to create action.   *   * Usage:   * ```typescript   * let action: actionSDK.Action;   * let request = new actionSDK.CreateAction.Request(action);   * let response = await actionSDK.executeApi(request) as actionSDK.CreateAction.Response;   * let actionId = response.actionId;   * ```   * @category Action CRUD API   */  export namespace CreateAction {      /**       * Request body for create action API.       */      class Request extends BaseApi.Request {          /**           * Action object to create.           */          action: Action;          /**           * Constructor to create a request object.           * @hidden           */          constructor(action: Action);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for create action API.       */      class Response extends BaseApi.Response {          /**           * ID of the action object created.           */          actionId: string;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, actionId: string, error?: ApiError);      }  }  /**   * API to delete action.   *   * Usage:   * ```typescript   * let actionId: string;   * let request = new actionSDK.DeleteAction.Request(actionId);   * let response = await actionSDK.executeApi(request) as actionSDK.DeleteAction.Response;   * let success = response.success;   * ```   * @category Action CRUD API   */  export namespace DeleteAction {      /**       * Request body for delete action API.       */      class Request extends BaseApi.Request {          /**           * ID of the Action to delete.           */          actionId: string;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for delete action API.       */      class Response extends BaseApi.Response {      }  }  /**   * API to get action.   *   * Usage:   * ```typescript   * let actionId: string;   * let request = new actionSDK.GetAction.Request(actionId);   * let response = await actionSDK.executeApi(request) as actionSDK.GetAction.Response;   * let action = response.action;   * ```   * @category Action CRUD API   */  export namespace GetAction {      /**       * Request body for get action API.       */      class Request extends BaseApi.Request {          /**           * ID of the Action to get.           */          actionId: string;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for get action API.       */      class Response extends BaseApi.Response {          /**           * The requested Action object.           */          action: Action;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, action: Action, error?: ApiError);      }  }  /**   * API to update action.   *   * Usage:   * ```typescript   * let actionUpdateInfo: actionSDK.ActionUpdateInfo;   * let request = new actionSDK.UpdateAction.Request(actionUpdateInfo);   * let response = await actionSDK.executeApi(request) as actionSDK.UpdateAction.Response;   * let success = response.success;   * ```   * @category Action CRUD API   */  export namespace UpdateAction {      /**       * Request body for update action API.       */      class Request extends BaseApi.Request {          /**           * Data required to update action.           */          actionUpdateInfo: ActionUpdateInfo;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionUpdateInfo: ActionUpdateInfo);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for update action API.       */      class Response extends BaseApi.Response {      }  }  /**   * API to get localized strings for the current action package.   *   * Usage:   * ```typescript   * let request = new actionSDK.GetLocalizedStrings.Request();   * let response = await actionSDK.executeApi(request) as actionSDK.GetLocalizedStrings.Response;   * let strings = response.strings;   * ```   * @category Action Package API   */  export namespace GetLocalizedStrings {      /**       * Request body for get localized strings API.       */      class Request extends BaseApi.Request {          /**           * Constructor to create a request object.           * @hidden           */          constructor();      }      /**       * Response body for get localized strings API.       */      class Response extends BaseApi.Response {          /**           * The localized strings.           */          strings: {              [key: string]: string;          };          /**           * Constructor to create a response object           * @ignore           */          constructor(id: string, strings: {              [key: string]: string;          }, error?: ApiError);      }  }  /**   * API to add an action data-row.   *   * Usage:   * ```typescript   * let dataRow: actionSDK.ActionDataRow;   * let request = new actionSDK.AddActionDataRow.Request(dataRow);   * let response = await actionSDK.executeApi(request) as actionSDK.AddActionDataRow.Response;   * let dataRowId = response.dataRowId;   * ```   * @category Data Row CRUD API   */  export namespace AddActionDataRow {      /**       * Request body for add action data-row API.       */      class Request extends BaseApi.Request {          /**           * The data-row object to add.           */          dataRow: ActionDataRow;          /**           * Constructor to create a request object.           * @hidden           */          constructor(dataRow: ActionDataRow);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for add action data-row API.       */      class Response extends BaseApi.Response {          /**           * ID of the data-row created.           */          dataRowId: string;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, dataRowId: string, error?: ApiError);      }  }  /**   * API to delete action data-row.   *   * Usage:   * ```typescript   * let actionId: string;   * let dataTableName: string; // It can be null, if the action contains only one data-table   * let dataRowId: string;   * let request = new actionSDK.DeleteActionDataRow.Request(actionId, dataRowId, dataTableName);   * let response = await actionSDK.executeApi(request) as actionSDK.DeleteActionDataRow.Response;   * let success = response.success;   * ```   * @category Data Row CRUD API   */  export namespace DeleteActionDataRow {      /**       * Request body for delete action data-row API.       */      class Request extends BaseApi.Request {          /**           * ID of the action.           */          actionId: string;          /**           * ID of the data-table.           * It can be null, if the action contains only one data-table.           */          dataTableName: string;          /**           * ID of the data-row to delete.           */          dataRowId: string;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string, dataRowId: string, dataTableName?: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for add action data-row API.       */      class Response extends BaseApi.Response {      }  }  /**   * API to download action data-rows' result.   *   * Usage:   * ```typescript   * let actionId: string;   * let dataTableName: string; // It can be null, if the action contains only one data-table   * let request = new actionSDK.DownloadActionDataRowsResult.Request(actionId, dataTableName);   * let response = await actionSDK.executeApi(request) as actionSDK.DownloadActionDataRowsResult.Response;   * let success = response.success;   * ```   * @category Data Row CRUD API   */  export namespace DownloadActionDataRowsResult {      /**       * Request body for download action data-rows' result API.       */      class Request extends BaseApi.Request {          /**           * ID of the action.           */          actionId: string;          /**           * Name of the data-table.           * It can be null, if the action contains only one data-table.           */          dataTableName: string;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string, dataTableName?: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for download action data-rows' result API.       */      class Response extends BaseApi.Response {      }  }  /**   * API to get action data-row.   *   * Usage:   * ```typescript   * let actionId: string;   * let dataTableName: string; // It can be null, if the action contains only one data-table   * let dataRowId: string;   * let request = new actionSDK.GetActionDataRow.Request(actionId, dataRowId, dataTableName);   * let response = await actionSDK.executeApi(request) as actionSDK.GetActionDataRow.Response;   * let dataRow = response.dataRow;   * ```   * @category Data Row CRUD API   */  export namespace GetActionDataRow {      /**       * Request body for get action data-row API.       */      class Request extends BaseApi.Request {          /**           * ID of the action.           */          actionId: string;          /**           * Name of the data-table.           * It can be null, if the action contains only one data-table.           */          dataTableName: string;          /**           * ID of the the data-row to fetch.           */          dataRowId: string;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string, dataRowId: string, dataTableName?: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for get action data-row API.       */      class Response extends BaseApi.Response {          /**           * The requested data-row.           */          dataRow: ActionDataRow;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, dataRow: ActionDataRow, error?: ApiError);      }  }  /**   * API to get action data-rows.   *   * Usage:   * ```typescript   * let actionId: string;   * let dataTableName: string; // It can be null, if the action contains only one data-table   * let creatorId: string; // If this is null, no creator filter will be applied   * let request = new actionSDK.GetActionDataRows.Request(actionId, creatorId, null, 100, dataTableName);   * let response = await actionSDK.executeApi(request) as actionSDK.GetActionDataRows.Response;   * let dataRows = response.dataRows;   * ```   * @category Data Row CRUD API   */  export namespace GetActionDataRows {      /**       * Request body for get action data-rows API.       */      class Request extends BaseApi.Request {          /**           * ID of the action.           */          actionId: string;          /**           * Name of the data-table.           * It can be null, if the action contains only one data-table.           */          dataTableName: string;          /**           * ID of the creator whose data-rows need to be fetched.           * If this is null, no creator filter will be applied.           */          creatorId: string;          /**           * Continuation token, if any, to fetch next set of rows.           */          continuationToken: string;          /**           * Maximum number of data-rows to fetch.           * Default value is 30.           */          pageSize: number;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string, creatorId?: string, continuationToken?: string, pageSize?: number, dataTableName?: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for get action data-rows API.       */      class Response extends BaseApi.Response {          /**           * The requested data-rows for the current batch.           */          dataRows: ActionDataRow[];          /**           * The token to fetch data-rows in the next batch.           */          continuationToken: string;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, dataRows: ActionDataRow[], continuationToken?: string, error?: ApiError);      }  }  /**   * API to add action data-rows' summary.   *   * Usage:   * ```typescript   * let actionId: string;   * let dataTableName: string; // It can be null, if the action contains only one data-table   * let request = new actionSDK.GetActionDataRowsSummary.Request(actionId, dataTableName);   * let response = await actionSDK.executeApi(request) as actionSDK.GetActionDataRowsSummary.Response;   * let summary = response.summary;   * ```   * @category Data Row CRUD API   */  export namespace GetActionDataRowsSummary {      /**       * Request body for get action data-rows' summary API.       */      class Request extends BaseApi.Request {          /**           * ID of the action.           */          actionId: string;          /**           * Name of the data-table.           * It can be null, if the action contains only one data-table.           */          dataTableName: string;          /**           * Flag denoting if default aggregates will be included in the response.           * Default is false.           */          addDefaultAggregates: boolean;          /**           * Constructor to create a request object           * @hidden           */          constructor(actionId: string, addDefaultAggregates?: boolean, dataTableName?: string);          /**           * Validation           * @internal           */          validate(): void;      }      /**       * Response body for get action data-rows' summary API.       */      class Response extends BaseApi.Response {          /**           * The requested data-rows' summary.           */          summary: ActionDataRowsSummary;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, summary: ActionDataRowsSummary, error?: ApiError);      }  }  /**   * API to update action data-row.   *   * Usage:   * ```typescript   * let dataRow: actionSDK.ActionDataRow;   * let request = new actionSDK.UpdateActionDataRow.Request(dataRow);   * let response = await actionSDK.executeApi(request) as actionSDK.UpdateActionDataRow.Response;   * let success = response.success;   * ```   * @category Data Row CRUD API   */  export namespace UpdateActionDataRow {      /**       * Request body for update action data-row API.       */      class Request extends BaseApi.Request {          /**           * The data-row object to update.           * It should contain the updated column values.           */          dataRow: ActionDataRow;          /**           * Constructor to create a request object.           * @hidden           */          constructor(dataRow: ActionDataRow);          /**           * Validation           * @internal           */          validate(): void;      }      /**       * Response body for udpate action data-row API.       */      class Response extends BaseApi.Response {      }  }  /**   * API to close current action package view.   *   * Usage:   * ```typescript   * let request = new actionSDK.CloseView.Request();   * let response = await actionSDK.executeApi(request) as actionSDK.CloseView.Response;   * let success = response.success;   * ```   * @category Misc API   */  export namespace CloseView {      /**       * Request body for close action package view API.       */      class Request extends BaseApi.Request {          /**           * Constructor to create a request object.           * @hidden           */          constructor();      }      /**       * Response body for close action package view API.       */      class Response extends BaseApi.Response {      }  }  /**   * API to get current context for the action package view.   *   * Usage:   * ```typescript   * let request = new actionSDK.GetContext.Request();   * let response = await actionSDK.executeApi(request) as actionSDK.GetContext.Response;   * let context = response.context;   * ```   * @category Misc API   */  export namespace GetContext {      /**       * Request body for get context API.       */      class Request extends BaseApi.Request {          /**           * Constructor to create a request object.           * @hidden           */          constructor();      }      /**       * Response body for get context API.       */      class Response extends BaseApi.Response {          /**           * The context.           */          context: ActionSdkContext;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, context: ActionSdkContext, error?: ApiError);      }  }  /**   * API to get profiles of the non-participants/non-responders of an action subscription.   *   * Usage:   * ```typescript   * let actionId: string;   * let subscriptionId: string; // It can be null, if the action contains only one subscription   * let request = new actionSDK.GetActionSubscriptionNonParticipants.Request(actionId, subscriptionId);   * let response = await actionSDK.executeApi(request) as actionSDK.GetActionSubscriptionNonParticipants.Response;   * let nonParticipants = response.nonParticipants;   * ```   * @category Subscription API   */  export namespace GetActionSubscriptionNonParticipants {      /**       * Request body for get action subscription non-participants API.       */      class Request extends BaseApi.Request {          /**           * ID of the action.           */          actionId: string;          /**           * ID of the subscription.           */          subscriptionId: string;          /**           * Constructor to create a request object.           * @hidden           */          constructor(actionId: string, subscriptionId?: string);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for get action subscription non-participants API.       */      class Response extends BaseApi.Response {          /**           * The requested non-participants' profiles.           */          nonParticipants: SubscriptionMember[];          /**           * The total number of non-participants.           */          nonParticipantCount: number;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, nonParticipants: SubscriptionMember[], nonParticipantCount: number, error?: ApiError);      }  }  /**   * API to get count of members in a subscription.   *   * Usage:   * ```typescript   * let subscription: Subscription;   * let request = new actionSDK.GetSubscriptionMemberCount.Request(subscription);   * let response = await actionSDK.executeApi(request) as actionSDK.GetSubscriptionMemberCount.Response;   * let memberCount = response.memberCount;   * ```   * @category Subscription API   */  export namespace GetSubscriptionMemberCount {      /**       * Request body for get subscription members' count API.       */      class Request extends BaseApi.Request {          /**           * The Subscription.           */          subscription: Subscription;          /**           * Constructor to create a request object.           * @hidden           */          constructor(subscription: Subscription);          /**           * Validation           * @internal           */          validate(): void;      }      /**       * Response body for get subscription members' count API.       */      class Response extends BaseApi.Response {          /**           * The requested members count.           */          memberCount: number;          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, memberCount: number, error?: ApiError);      }  }  /**   * API to get profiles of a subscription members.   *   * Usage:   * ```typescript   * let subscription: Subscription;   * let memberIds: string[]; // Member IDs to filter   * let request = new actionSDK.GetSubscriptionMembers.Request(subscription, memberIds);   * let response = await actionSDK.executeApi(request) as actionSDK.GetSubscriptionMembers.Response;   * let members = response.members;   * ```   * @category Subscription API   */  export namespace GetSubscriptionMembers {      /**       * Request body for get subscription members API.       */      class Request extends BaseApi.Request {          /**           * The Subscription.           */          subscription: Subscription;          /**           * List of member IDs to filter.           */          memberIds: string[];          /**           * Constructor to create a request object.           * @hidden           */          constructor(subscription: Subscription, memberIds: string[]);          /**           * Validation.           * @internal           */          validate(): void;      }      /**       * Response body for get subscription members API.       */      class Response extends BaseApi.Response {          /**           * The requested profiles of the members.           */          members: SubscriptionMember[];          /**           * ID of the members whose profiles could not be found.           */          memberIdsNotFound: string[];          /**           * Constructor to create a response object.           * @ignore           */          constructor(id: string, members: SubscriptionMember[], memberIdsNotFound?: string[], error?: ApiError);      }  }  /**   * This interface represents an action object.   * @category Data Model   */  export interface Action {      /**       * ID of the action.       */      id?: string;      /**       * ID of the action package.       */      actionPackageId?: string;      /**       * User ID of the action creator.       */      creatorId?: string;      /**       * Epoch timestamp when the action was created.       */      createTime?: number;      /**       * Epoch timestamp when the action was last modified.       */      updateTime?: number;      /**       * Epoch timestamp when the action will expire.       */      expiryTime?: number;      /**       * Version of the action.       */      version?: number;      /**       * Status of the action.       */      status?: ActionStatus;      /**       * Title/Display name of the action.       */      displayName: string;      /**       * List of subscriptions for the action. A subscription can be a group or a user.       * All subscriptions will be notified on every event on the action.       */      subscriptions?: Subscription[];      /**       * List of custom properties of the action.       */      customProperties?: ActionProperty[];      /**       * List of data-tables of the action.       */      dataTables?: ActionDataTable[];  }  /**   * This interface represents each data-column in an action data-table.   * @category Data Model   */  export interface ActionDataColumn {      /**       * Name/identifier of the data-column.       */      name: string;      /**       * Title/display name of the data-column.       */      displayName: string;      /**       * Type of values contained by the data-column.       */      valueType: ActionDataColumnValueType;      /**       * This controls if null values for this data-column will be allowed in each data-row.       */      allowNullValue?: boolean;      /**       * Set of options that the data-column can have in each Action.       * This is only applicable to SingleOption/MultiOption type data-column.       */      options?: ActionDataColumnOption[];  }  
  /**   * This interface represents each option in a multi-choice type action data-column.   * @category Data Model   */  export interface ActionDataColumnOption {      /**       * Name/identifier of the option.       */      name: string;      /**       * Title/display name of the option.       */      displayName: string;  }  
  /**   * This enum represents the different types of data contained by an action data-column.   * @category Data Model   */  export enum ActionDataColumnValueType {      /**       * Multi-choice type, only one option can be selected.       */      SingleOption = "SingleOption",      /**       * Multi-choice type, any number of options can be selected.       */      MultiOption = "MultiOption",      /**       * Text type, upto 4000 characters.       */      Text = "Text",      /**       * Large text type, for more than 4000 characters.       */      LargeText = "LargeText",      /**       * Number type.       */      Numeric = "Numeric",      /**       * Location type, with latitude (lt), longitude (lg), name (n).       */      Location = "Location",      /**       * Epoch timestamp type.       */      DateTime = "DateTime",      /**       * Date type, with "YYYY-MM-DD" format.       */      Date = "Date",      /**       * User ID type.       */      UserId = "UserId"  }  
  /**   * This interface represents a data-row.   * @category Data Model   */  export interface ActionDataRow {      /**       * ID of the data-row.       */      id?: string;      /**       * ID of the action.       */      actionId: string;      /**       * Name of the data-table.       */      dataTableName?: string;      /**       * User ID of the data-row creator.       */      creatorId?: string;      /**       * Epoch timestamp when the data-row was created.       */      createTime?: number;      /**       * Epoch timestamp when the data-row was last modified.       */      updateTime?: number;      /**       * Map of data-column names to their values.       */      columnValues: {          [key: string]: string;      };  }  
  /**   * This interface represents the summary of the data-rows in a data-table.   * @category Data Model   */  export interface ActionDataRowsSummary {      /**       * Number of data-rows.       */      rowCount: number;      /**       * Number of unique data-rows' creators.       */      rowCreatorCount: number;      /**       * Map of data-column names to corresponding default aggregates.       * Default aggregate depends on the data-column type.       * Example:       * Numeric type - sum & average       * SingleOption/MultiOption type - option responders count       * Other types - top 10 values       */      defaultAggregates?: {          [key: string]: string;      };  }  /**   * This interface represents a data-table in an action.   * @category Data Model   */  export interface ActionDataTable {      /**       * Name/identifier of the data-table.       */      name: string;      /**       * This controls who all can see the data-rows.       */      rowsVisibility?: Visibility;      /**       * This controls if data-rows are editable by a user.       */      rowsEditable?: boolean;      /**       * This controls if multiple data-rows are allowed from a single user.       */      canUserAddMultipleRows?: boolean;      /**       * List of data-columns for the data-table.       */      dataColumns: ActionDataColumn[];  }  /**   * This interface represents the data required to update an action data-table.   * @category Data Model   */  export interface ActionDataTableUpdateInfo {      /**       * Name/identifier of the data-table.       */      name: string;      /**       * New setting for the data-rows visibility.       */      rowsVisibility: Visibility;  }  /**   * This interface represents each action property.   * @category Data Model   */  export interface ActionProperty {      /**       * Name/identifier of the property.       */      name: string;      /**       * Type of values contained by the property.       */      valueType: ActionPropertyValueType;      /**       * Value of the property.       */      value?: string;  }  /**   * This interface represents the data required to update an action property.   * @category Data Model   */  export interface ActionPropertyUpdateInfo {      /**       * Name of the property.       */      name: string;      /**       * Type of values contained by the property.       */      valueType: ActionPropertyValueType;      /**       * Type of property update.       */      updateType: ActionPropertyUpdateType;      /**       * New value of the property, if any.       */      value?: string;  }  
  /**   * This enum represents the different update types of action properties.   * @category Data Model   */  export enum ActionPropertyUpdateType {      /**       * Replace the old property value with a new one.       */      Update = "Update",      /**       * Add a new property.       */      Add = "Add",      /**       * Delete a property.       */      Delete = "Delete",      /**       * Replace an entry in the property value (Array type) with a new one.       */      Replace = "Replace",      /**       * Add entries in the property value (Array type).       */      Append = "Append",      /**       * Remove entries from the property value (Array type).       */      Remove = "Remove"  }  
  /**   * This enum represents the different types of values contained by an action property.   * @category Data Model   */  export enum ActionPropertyValueType {      /**       * Text type.       */      Text = "Text",      /**       * Number type.       */      Numeric = "Numeric",      /**       * Location type, with latitude (lt), longitude (lg), name (n).       */      Location = "Location",      /**       * Epoch timestamp type.       */      DateTime = "DateTime",      /**       * Unique list of texts type.       */      StringSet = "StringSet"  }  /**   * This interface represents the current context of the action package view.   * @category Data Model   */  export interface ActionSdkContext {      /**       * Current host type, like - Teams, Outlook, etc.       */      hostType: string;      /**       * Current host client type, like - ios, android, web, etc.       */      hostClientType: string;      /**       * Current action package ID.       */      actionPackageId: string;      /**       * Current action ID.       */      actionId: string;      /**       * Current active directory ID.       */      tenantId: string;      /**       * Current user ID.       */      userId: string;      /**       * Current language tag, like - en-us, hi-in, etc.       */      locale: string;      /**       * Current theme, like - default, dark, etc.       */      theme: string;      /**       * Current subscription object.       */      subscription: Subscription;      /**       * Any data related to the current view.       */      viewData: string;  }  
  /**   * This enum represents different types of action statuses.   * @category Data Model   */  export enum ActionStatus {      /**       * Default action status.       */      Active = "Active",      /**       * Beyond expiry time an action will automatically be expired.       * No further data-rows will be allowed after this.       */      Expired = "Expired",      /**       * An action can be closed manually.       * No further data-rows will be allowed after this.       */      Closed = "Closed"  }  /**   * This interface represents the data required to update an action object.   * @category Data Model   */  export interface ActionUpdateInfo {      /**       * ID of the action.       */      id: string;      /**       * Current version of the action.       * This is useful for resolving conflicts among multiple updates.       */      version: number;      /**       * New title/display name of the action.       */      displayName?: string;      /**       * New expiry of the action in Epoch timestamp.       */      expiryTime?: number;      /**       * New status of the action.       */      status?: ActionStatus;      /**       * Data required to update the action custom properties.       */      customProperties?: ActionPropertyUpdateInfo[];      /**       * Data required to update the action data-tables.       */      dataTables?: ActionDataTableUpdateInfo[];  }  /**   * This interface represents a subscription object.   * @category Data Model   */  export interface Subscription {      /**       * The ID of the subscription based on its type – group id or user id.       */      id: string;      /**       * The type of the subscription.       */      type: SubscriptionType;      /**       * The host/channel the subscription belongs to – Teams, Outlook, etc.       */      source: string;      /**       * Additional properties for the subscription, like – TeamId in case of a Teams channel.       */      properties?: any;  }  
  /**   * This interface represents a subscription member.   * @category Data Model   */  export interface SubscriptionMember {      /**       * Member's ID.       */      id: string;      /**       * Member's name.       */      displayName: string;      /**       * Member's profile photo URL, if any.       */      profilePhotoUrl?: string;  }  
  /**   * This enum represents different types of subscriptions.   * @category Data Model   */  export enum SubscriptionType {      /**       * A group type subscription represents a set of users/members.       */      Group = "Group",      /**       * A user type subscription represents just one user.       */      User = "User"  }  
  /**   * This enum represents the different types of visibility setting.   * @category Data Model   */  export enum Visibility {      /**       * Only visible to sender/creator of the action.       */      Sender = "Sender",      /**       * Visible to every member in every action subscriptions.       */      All = "All"  }  /**   * Bridge between ActionSDK and ActionHost.   * @internal   */  export class ActionSdkHostBridge {      /**       * Below will be used when action views are hosted directly within ActionHost.       */      static actionSdkHost: IActionSdkHost;      /**       * Below will be used when action views are hosted within an iFrame inside ActionHost.       */      static currentWindow: Window | any;      /**       * This will ensure the above properties are initialized properly.       */      private static ensureInitialized;      /**       * ActionSdkHost when action views are hosted within ActionHost.       */      static executeBatchApiRequest(batchRequest: BaseApi.BatchRequest): Promise<BaseApi.BatchResponse>;      /**       * ActionSdkHost when action views are hosted within an iFrame in ActionHost.       */      private static apiResolves;      private static executeIFramedBatchApiRequest;      /**       * Communication from ActionSDK to ActionHost.       */      private static sendMessageToActionHost;      /**       * Communication from ActionHost to ActionSDK.       */      private static receivingMessageFromActionHost;      private static receiveMessageFromActionHost;  }  /**   * ActionHost needs to implement the APIs in this interface to   * allow ActionSDK to communicate with it for any API request.   * @internal   */  export interface IActionSdkHost {      executeBatchApiRequest(batchRequest: BaseApi.BatchRequest): Promise<BaseApi.BatchResponse>;  }  
}