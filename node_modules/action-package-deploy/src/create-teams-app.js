#!/usr/bin/env node

const fs = require("fs");
const yargs = require("yargs");
const actionApis = require("./action-apis");
const logger = require("./logger");

const options = yargs
    .usage("Usage: -p <PackageId> -d <DownloadPath>")
    .option("p", { alias: "package-id", describe: "Action package ID", type: "string", demandOption: true })
    .option("d", { alias: "download-path", describe: "Teams app zip download directory", type: "string", demandOption: true })
    .option("e", { alias: "endpoint", describe: "Action platform endpoint", type: "string", default: "https://actions.office365.com" })
    .option("l", { alias: "log-level", describe: "Log level", choices: ["status", "info", "debug", "none"], default: "info" })
    .argv;

logger.setLogLevel(options["l"]);

if (options["d"] && !fs.existsSync(options["d"])) {
    logger.logError(`Download path doesn't exist: ${options["d"]}`);
}

async function createTeamsApp(endpoint, packageId, downloadPath) {
    logger.logInfo(`Creating Teams app ...`);
    var teamsAppMonitorResponse = await actionApis.createTeamsApp(endpoint, packageId);

    logger.logInfo(`Monitoring Teams app status ...`);
    var teamsAppStatusResponse = await actionApis.monitorStatusUrl(teamsAppMonitorResponse.url);

    if (teamsAppStatusResponse && teamsAppStatusResponse.status === "Completed" && teamsAppStatusResponse.message.startsWith("SUCCESS:")) {
        logger.logInfo(`Teams app creation succeeded! ${teamsAppStatusResponse.message}`);

        logger.logInfo(`Downloading Teams app ...`);
        var filePath = await actionApis.downloadBlob(teamsAppStatusResponse.resourceUrl, downloadPath);
        if (filePath) {
            logger.logSuccess(`Teams app download succeeded! Path: ${filePath}`);
        } else {
            logger.logError(`Teams app download failed!`);
        }
    } else {
        logger.logError(`Teams app creation failed! ${teamsAppStatusResponse.message}`);
    }
}

createTeamsApp(options["e"], options["p"], options["d"]);