const fs = require("fs");
const path = require("path");
const fetch = require("node-fetch");
const actionAuth = require("./action-auth");
const logger = require("./logger");

const MAX_RETRIES = 30;

async function executeApi(method, url, headers = undefined, body = undefined) {
    try {
        logger.logDebug(`Executing API: ${method} ${url} ...`);
        var apiResponse = await fetch(url, {
            method: method,
            headers: headers,
            body: body
        });
        logger.logDebug(`API response status: ${apiResponse.status}, statusText: ${apiResponse.statusText}`);

        if (!apiResponse.ok) {
            var apiError = await apiResponse.text();
            throw apiError;
        }

        // Finally return the response
        return apiResponse;
    } catch (err) {
        var errorMessage = typeof err !== "string"
            ? JSON.stringify(err) : err;
        logger.logInfo(`API response error: ${errorMessage}`);
        return null;
    }
}

var authToken = null;
async function getActionHeaders() {
    if (!authToken) {
        logger.logDebug(`Fetching API token ...`);
        authToken = await actionAuth.fetchAuthToken();
    }
    return {
        "Authorization": `Bearer ${authToken.token}`,
        "Content-Type": "application/json"
    };
}

async function executeActionApi(endpoint, method, path, body = undefined) {
    var headers = await getActionHeaders();
    return await executeApi(method, `${endpoint}${path}`, headers, body);
}

exports.uploadBlob = async (uploadUrl, filePath) => {
    var fileStats = fs.statSync(filePath);
    var headers = {
        "x-ms-blob-type": "BlockBlob",
        "Content-Length": fileStats.size,
        "Content-Type": "application/octet-stream"
    };
    var fileStream = fs.createReadStream(filePath);
    var apiResponse = await executeApi("PUT", uploadUrl, headers, fileStream);
    return apiResponse.ok;
}

exports.downloadBlob = async (downloadUrl, downloadFolder) => {
    var apiResponse = await executeApi("GET", downloadUrl);
    if (apiResponse && apiResponse.ok) {
        var downloadUrlPath = new URL(downloadUrl).pathname;
        var fileName = downloadUrlPath.substring(downloadUrlPath.lastIndexOf("/") + 1);
        var filePath = path.join(downloadFolder, fileName);
        var fileStream = fs.createWriteStream(filePath);
        apiResponse.body.pipe(fileStream);
        return filePath;
    }
    return null;
}

exports.monitorStatusUrl = async (statusUrl, retries = 1) => {
    if (retries > MAX_RETRIES) {
        logger.logDebug("Max retries exhausted!");
        return Promise.reject("Max retries exhausted!");
    }
    var headers = await getActionHeaders();
    var apiResponse = await executeApi("GET", statusUrl, headers);
    if (apiResponse && apiResponse.ok) {
        var apiResponseJson = await apiResponse.json();
        logger.logDebug(`Retry#${retries} - status: ${apiResponseJson.status}, message: ${apiResponseJson.message || ""}`);

        if (apiResponseJson.status === "InProgress") {
            await new Promise(r => setTimeout(r, 2000));
            return exports.monitorStatusUrl(statusUrl, retries + 1);
        }
        return apiResponseJson;
    }
    return null;
}

exports.getActionPackageZipUploadUrl = async (endpoint) => {
    var apiResponse = await executeActionApi(endpoint, "GET", `/v1/actionPackages/zipUploadUrl`);
    return apiResponse && apiResponse.ok ? await apiResponse.json() : null;
}

exports.processActionPackageZip = async (endpoint, uploadUrl) => {
    var body = {
        url: uploadUrl
    };
    var apiResponse = await executeActionApi(endpoint, "POST", `/v1/actionPackages/processZip`, JSON.stringify(body));
    return apiResponse && apiResponse.ok ? await apiResponse.json() : null;
}

exports.getActionPackage = async (endpoint, packageId) => {
    var apiResponse = await executeActionApi(endpoint, "GET", `/v1/actionPackages/${packageId}`);
    return apiResponse && apiResponse.ok ? await apiResponse.json() : null;
}

exports.getActionPackages = async (endpoint, creatorId, name) => {
    var apiResponse = await executeActionApi(endpoint, "GET", `/v1/actionPackages?creatorId=${creatorId || ""}&name=${name || ""}`);
    return apiResponse && apiResponse.ok ? await apiResponse.json() : null;
}

exports.deleteActionPackage = async (endpoint, packageId) => {
    var apiResponse = await executeActionApi(endpoint, "DELETE", `/v1/actionPackages/${packageId}`);
    return apiResponse && apiResponse.ok ? await apiResponse.json() : null;
}

exports.createTeamsApp = async (endpoint, packageId) => {
    var apiResponse = await executeActionApi(endpoint, "POST", `/v1/actionPackages/${packageId}/teamsApp`);
    return apiResponse && apiResponse.ok ? await apiResponse.json() : null;
}