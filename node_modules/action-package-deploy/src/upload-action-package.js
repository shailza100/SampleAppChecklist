#!/usr/bin/env node

const fs = require("fs");
const yargs = require("yargs");
const actionApis = require("./action-apis");
const logger = require("./logger");

const options = yargs
    .usage("Usage: -z <PackageZipPath> [-t <TeamsAppDownloadPath>]")
    .option("z", { alias: "zip-path", describe: "Action package zip file path", type: "string", demandOption: true })
    .option("t", { alias: "teams-app-download-path", describe: "Teams app zip download directory", type: "string" })
    .option("e", { alias: "endpoint", describe: "Action platform endpoint", type: "string", default: "https://actions.office365.com" })
    .option("l", { alias: "log-level", describe: "Log level", choices: ["status", "info", "debug", "none"], default: "info" })
    .argv;

logger.setLogLevel(options["l"]);

if (options["z"] && !fs.existsSync(options["z"])) {
    logger.logError(`Zip file doesn't exist: ${options["z"]}`);
}
if (options["t"] && !fs.existsSync(options["t"])) {
    logger.logError(`Download path doesn't exist: ${options["t"]}`);
}

async function uploadActionPackage(endpoint, zipPath, teamsAppDownloadPath) {
    logger.logInfo(`Fetching zip upload url ...`);
    var urlResponse = await actionApis.getActionPackageZipUploadUrl(endpoint);

    logger.logInfo(`Uploading action package zip ...`);
    var uploadResponse = await actionApis.uploadBlob(urlResponse.url, zipPath);

    if (uploadResponse) {
        logger.logInfo(`Processing action package zip ...`);
        var monitorResponse = await actionApis.processActionPackageZip(endpoint, urlResponse.url);

        logger.logInfo(`Monitoring status ...`);
        var statusResponse = await actionApis.monitorStatusUrl(monitorResponse.url);

        if (statusResponse.status === "Completed" && statusResponse.message.startsWith("SUCCESS:")) {
            logger.logSuccess(`Upload succeeded! ${statusResponse.message}`);
            if (teamsAppDownloadPath) {
                var resourceUrlPath = new URL(statusResponse.resourceUrl).pathname;
                var packageId = resourceUrlPath.substring(resourceUrlPath.lastIndexOf("/") + 1);

                logger.logInfo(`Creating Teams app ...`);
                var teamsAppMonitorResponse = await actionApis.createTeamsApp(endpoint, packageId);

                logger.logInfo(`Monitoring Teams app status ...`);
                var teamsAppStatusResponse = await actionApis.monitorStatusUrl(teamsAppMonitorResponse.url);

                if (teamsAppStatusResponse && teamsAppStatusResponse.status === "Completed" && teamsAppStatusResponse.message.startsWith("SUCCESS:")) {
                    logger.logInfo(`Teams app creation succeeded! ${teamsAppStatusResponse.message}`);

                    logger.logInfo(`Downloading Teams app ...`);
                    var filePath = await actionApis.downloadBlob(teamsAppStatusResponse.resourceUrl, teamsAppDownloadPath);
                    if (filePath) {
                        logger.logSuccess(`Teams app download succeeded! Path: ${filePath}`);
                    } else {
                        logger.logError(`Teams app download failed!`);
                    }
                } else {
                    logger.logError(`Teams app creation failed! ${teamsAppStatusResponse.message}`);
                }
            }
        } else {
            logger.logError(`Upload failed! ${statusResponse.message}`);
        }
    } else {
        logger.logError(`Upload failed!`);
    }
}

uploadActionPackage(options["e"], options["z"], options["t"]);